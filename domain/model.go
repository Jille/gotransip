package domain

import "net"

// Response object with a list of Domains in it
// used to unpack the rest response and return the encapsulated Domains
// this is just used internal for unpacking, this should not be exported
// we want to return Domain objects not a DomainsResponse
type DomainsResponse struct {
	Domains []Domain `json:"domains"`
}

type DomainResponse struct {
	// The auth code of the domain.
	AuthCode    string       `json:"authCode,omitempty"`
	Contacts    []Contact    `json:"contacts,omitempty"`
	DnsEntries  []DnsEntry   `json:"dnsEntries,omitempty"`
	DomainName  string       `json:"domainName,omitempty"`
	Nameservers []Nameserver `json:"nameservers,omitempty"`
}

// Dns struct for Dns
type Dns struct {
}

// DomainsDomainNameDnsDnsEntry struct for DomainsDomainNameDnsDnsEntry
type DomainsDomainNameDnsDnsEntry struct {
	// The content of of the dns entry, for example '10 mail', '127.0.0.1' or 'www'
	Content string `json:"content"`
	// The expiration period of the dns entry, in seconds. For example 86400 for a day of expiration
	Expire uint32 `json:"expire"`
	// The name of the dns entry, for example '@' or 'www'
	Name string `json:"name"`
	// The type of dns entry. Possbible types are 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'TXT', 'SRV', 'SSHFP' and 'TLSA'
	Type string `json:"type"`
}

// Contact struct for Contact
type Contact struct {
	// Email address of the contact
	Email string `json:"email"`
	// Id number of the contact
	Id int64 `json:"id"`
	// Name of the contact
	Name string `json:"name"`
	// Telephone number of the contact
	Telephone string `json:"telephone"`
}

// Contacts struct for Contacts
type Contacts struct {
}

type ContactsResponse struct {
	Contacts []Contact `json:"contacts"`
}

// Tlds struct for Tlds
type Tlds struct {
}

// Actions struct for Actions
type Actions struct {
}

// DnsEntry struct for DnsEntry
type DnsEntry struct {
	// The content of of the dns entry, for example '10 mail', '127.0.0.1' or 'www'
	Content string `json:"content"`
	// The expiration period of the dns entry, in seconds. For example 86400 for a day of expiration
	Expire float32 `json:"expire"`
	// The name of the dns entry, for example '@' or 'www'
	Name string `json:"name"`
	// The type of dns entry. Possbible types are 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'TXT', 'SRV', 'SSHFP' and 'TLSA'
	Type string `json:"type"`
}

// WhoisContact struct for WhoisContact
type WhoisContact struct {
	// The city part of the address of this Contact
	City string `json:"city"`
	// The kvk number of this Contact, in case of a company
	CompanyKvk string `json:"companyKvk"`
	// The companyName of this Contact, in case of a company
	CompanyName string `json:"companyName"`
	// The type number of this Contact, in case of a company. Possible types are: 'BV', 'BVI/O', 'COOP', 'CV', 'EENMANSZAAK', 'KERK', 'NV', 'OWM', 'REDR', 'STICHTING', 'VERENIGING', 'VOF', 'BEG', 'BRO', 'EESV' and 'ANDERS'
	CompanyType string `json:"companyType"`
	// The country of this Contact, one of the ISO 3166-1 2 letter country codes, must be lowercase.
	Country string `json:"country"`
	// The email address of this Contact
	Email string `json:"email"`
	// The faxNumber of this Contact
	FaxNumber string `json:"faxNumber,omitempty"`
	// The firstName of this Contact
	FirstName string `json:"firstName"`
	// The lastName of this Contact
	LastName string `json:"lastName"`
	// The number part of the address of this Contact
	Number string `json:"number"`
	// The phoneNumber of this Contact
	PhoneNumber string `json:"phoneNumber"`
	// The postalCode part of the address of this Contact
	PostalCode string `json:"postalCode"`
	// The street of the address of this Contact
	Street string `json:"street"`
	// The type of this Contact, 'registrant', 'administrative' or 'technical'
	Type string `json:"type"`
}

// Nameservers struct for Nameservers
type Nameservers struct {
}

// Branding struct for Branding
type Branding struct {
}

// Ssl struct for Ssl
type Ssl struct {
}

// Whitelabel struct for Whitelabel
type Whitelabel struct {
}

// DomainsDomainNameDomain struct for DomainsDomainNameDomain
type DomainsDomainNameDomain struct {
	// The custom tags added to this domain.
	Tags []string `json:"tags"`
	// The authcode for this domain as generated by the registry.
	AuthCode string `json:"authCode,omitempty"`
	// Cancellation data, in YYYY-mm-dd h:i:s format, null if the domain is active.
	CancellationDate string `json:"cancellationDate,omitempty"`
	// Cancellation status, null if the domain is active, 'cancelled' when the domain is cancelled.
	CancellationStatus string `json:"cancellationStatus,omitempty"`
	// Whether this domain is DNS only
	IsDnsOnly bool `json:"isDnsOnly,omitempty"`
	// If this domain supports transfer locking, this flag is true when the domains ability to transfer is locked at the registry.
	IsTransferLocked bool `json:"isTransferLocked"`
	// If this domain is added to your whitelabel.
	IsWhitelabel bool `json:"isWhitelabel"`
	// The name, including the tld of this domain
	Name string `json:"name"`
	// Registration date of the domain, in YYYY-mm-dd format.
	RegistrationDate string `json:"registrationDate,omitempty"`
	// Next renewal date of the domain, in YYYY-mm-dd format.
	RenewalDate string `json:"renewalDate,omitempty"`
}

// Whois struct for Whois
type Whois struct {
}

// DomainAction struct for DomainAction
type DomainAction struct {
	// If this action has failed, this field will be true.
	HasFailed bool `json:"hasFailed,omitempty"`
	// If this action has failed, this field will contain an descriptive message.
	Message string `json:"message,omitempty"`
	// The name of this DomainAction.
	Name string `json:"name"`
}

// Domains struct for Domains
type Domains struct {
}

// SslCertificate struct for SslCertificate
type SslCertificate struct {
	// The id of the certificate, can be used to retrieve additional info
	CertificateId float32 `json:"certificateId"`
	// The domain name that the SSL certificate is added to. Start with '*.' when the certificate is a wildcard.
	CommonName string `json:"commonName"`
	// Expiration date
	ExpirationDate string `json:"expirationDate"`
	// The current status, either 'active', 'inactive' or 'expired'
	Status string `json:"status"`
}

// Domain struct for Domain
type Domain struct {
	// The custom tags added to this domain.
	Tags []string `json:"tags"`
	// The authcode for this domain as generated by the registry.
	AuthCode string `json:"authCode,omitempty"`
	// Cancellation data, in YYYY-mm-dd h:i:s format, null if the domain is active.
	CancellationDate string `json:"cancellationDate,omitempty"`
	// Cancellation status, null if the domain is active, 'cancelled' when the domain is cancelled.
	CancellationStatus string `json:"cancellationStatus,omitempty"`
	// Whether this domain is DNS only
	IsDnsOnly bool `json:"isDnsOnly,omitempty"`
	// If this domain supports transfer locking, this flag is true when the domains ability to transfer is locked at the registry.
	IsTransferLocked bool `json:"isTransferLocked"`
	// If this domain is added to your whitelabel.
	IsWhitelabel bool `json:"isWhitelabel"`
	// The name, including the tld of this domain
	Name string `json:"name"`
	// Registration date of the domain, in YYYY-mm-dd format.
	RegistrationDate string `json:"registrationDate,omitempty"`
	// Next renewal date of the domain, in YYYY-mm-dd format.
	RenewalDate string `json:"renewalDate,omitempty"`
}

// DomainBranding struct for DomainBranding
type DomainBranding struct {
	// The first generic bannerLine displayed in whois-branded whois output.
	BannerLine1 string `json:"bannerLine1"`
	// The second generic bannerLine displayed in whois-branded whois output.
	BannerLine2 string `json:"bannerLine2"`
	// The third generic bannerLine displayed in whois-branded whois output.
	BannerLine3 string `json:"bannerLine3"`
	// The company name displayed in transfer-branded e-mails
	CompanyName string `json:"companyName"`
	// The company url displayed in transfer-branded e-mails
	CompanyUrl string `json:"companyUrl"`
	// The support email used for transfer-branded e-mails
	SupportEmail string `json:"supportEmail"`
	// The terms of usage url as displayed in transfer-branded e-mails
	TermsOfUsageUrl string `json:"termsOfUsageUrl"`
}

// DnsSecEntry struct for DnsSecEntry
type DnsSecEntry struct {
	// The algorithm type that is used, click [here](https://www.transip.nl/vragen/461-domeinnaam-nameservers-gebruikt-beveiligen-dnssec/) to see the possible options.
	Algorithm float32 `json:"algorithm"`
	// The signing key number, either 256 (Zone Signing Key) or 257 (Key Signing Key)
	Flags float32 `json:"flags"`
	// A 5-digit key of the Zonesigner
	KeyTag float32 `json:"keyTag"`
	// The public key
	PublicKey string `json:"publicKey"`
}

// Dnssec struct for Dnssec
type Dnssec struct {
	// All DNSSEC entries for a domain
	DnsSecEntries []DnsSecEntry `json:"dnsSecEntries"`
}

// Tld struct for Tld
type Tld struct {
	// Number of days a domain needs to be canceled before the renewal date.
	CancelTimeFrame uint32 `json:"cancelTimeFrame,omitempty"`
	// A list of the capabilities that this Tld has (the things that can be done with a domain under this tld). Possible capabilities are: 'requiresAuthCode', 'canRegister', 'canTransferWithOwnerChange', 'canTransferWithoutOwnerChange', 'canSetLock', 'canSetOwner', 'canSetContacts', 'canSetNameservers', 'supportsDnsSec'
	Capabilities []string `json:"capabilities,omitempty"`
	// The maximum amount of characters need for registering a domain under this TLD.
	MaxLength uint32 `json:"maxLength,omitempty"`
	// The minimum amount of characters need for registering a domain under this TLD.
	MinLength uint32 `json:"minLength,omitempty"`
	// The name of this TLD, including the starting dot. E.g. .nl or .com.
	Name string `json:"name"`
	// Price of the TLD in cents
	Price uint64 `json:"price,omitempty"`
	// Price for renewing the TLD in cents
	RecurringPrice uint64 `json:"recurringPrice,omitempty"`
	// Length in months of each registration or renewal period.
	RegistrationPeriodLength uint64 `json:"registrationPeriodLength,omitempty"`
}

// DomainCheckResult struct for DomainCheckResult
type DomainCheckResult struct {
	// List of available actions to perform on this domain. Possible actions are: 'register', 'transfer', 'internalpull' and 'internalpush'
	Actions []string `json:"actions"`
	// The name of the domain
	DomainName string `json:"domainName"`
	// The status for this domain. Possible statuses are: 'inyouraccount', 'unavailable', 'notfree', 'free', 'internalpull' and 'internalpush'
	Status string `json:"status"`
}

// Availability struct for Availability
type Availability struct {
	DomainCheckResult []DomainCheckResult `json:"availability"`
}

// Nameserver struct for Nameserver
type Nameserver struct {
	// The hostname of this nameserver
	Hostname string `json:"hostname"`
	// Optional ipv4 glue record for this nameserver
	Ipv4 net.IP `json:"ipv4,omitempty"`
	// Optional ipv6 glue record for this nameserver
	Ipv6 net.IP `json:"ipv6,omitempty"`
}
